INTRODUCCION

Este proyecto implementa ejemplos de clases, encapsulamiento, herencia y polimorfismo en Python. Son indispensables en la programaci√≥n orientada a objetos (POO) y esenciales para el desarrollo software estructurado.

ARCHIVOS

El presente proyecto tiene como archivos clases.py, encapsulamiento.py, herencia.py, polimorfismo.py, eleccion_del_tema.txt, documentacion_del_proyecto.txt, captura_de_la_ejecucion.png.

DESCRIPCION DE LOS CODIGOS

1. Clases (Ecuaci√≥n cuadr√°tica)
- La clase "EcuacionCuadratica" se utiliza para representar y resolver ecuaciones cuadr√°ticas de la forma ax^2+bx+c=0.
- Los atributos son los coeficientes a, b, c y la lista ra√≠ces donde se almacena las ra√≠ces de la ecuaci√≥n.
- En los m√©todos cree el constructor "_init_(self, coea, coeb, coec)" y las funciones ra√≠ces(self) que devuelve la lista de ra√≠ces y calcular(self) que calcula las ra√≠ces de la ecuaci√≥n con la f√≥rmula general.
- El procedimiento para calcular las ra√≠ces es el siguiente:
a. Primero se calcula el discriminante ùëë=ùëè^2‚àí4ùëéùëê.
b. Si el d = 0, la ecuaci√≥n tiene una ra√≠z real: Calcula la ra√≠z ùë•1=‚àíùëè/(2ùëé) y la agrega a la lista raices.
c. Si el d > 0, la ecuaci√≥n tiene dos ra√≠ces reales: Calcula las ra√≠ces x1 y x2 usando la f√≥rmula cuadr√°tica y las a√±ade a la lista raices.
d. Si el d < 0, la ecuaci√≥n no tiene ra√≠ces reales y la lista raices se queda vac√≠a.
- Finalmente se crean 3 instancias de la clase "EcuacionCuadratica" con diferentes coeficientes, se calculan sus ra√≠ces y se imprimen

2. Encapsulamiento (alumno) 
- La clase "Persona" encapsula datos dentro de una clase para proteger la integridad de los datos y restringir el acceso.
- El atributo privado self._nombre es un atributo que no se puede acceder directamente desde fuera de la clase. Est√° prefijado con dos guiones bajos (_) lo que significa que el atributo es privado.
- __saludar es un m√©todo privado que imprime un mensaje. De la misma forma que el atributo, este m√©todo indica que no debe ser llamado desde fuera de la clase.
- mostrar_nombre es un m√©todo p√∫blico que devuelve el valor del atributo privado __nombre. Proporciona una forma segura de acceder al valor del atributo desde fuera de la clase.
- Cree una isntancia de la clase persona: alumno = Persona()
- Se accede al m√©todo y atributo privados __saludar y __nombre mediante t√©cnicas que nos permite utilizar Python.
- Finalmente se imprimen los resultados.

3. Herencias (Calcular √°reas)
- Se cre√≥ los atributos √°rea que almacena el √°rea de la figura y per√≠metro que almacena el per√≠metro de la figura.
- Se cre√≥  el constructor _init_(self, nombre) que inicializa el nombre de la figura. Despu√©s, el m√©odo Area(self) que devuelve el valor del atributo area. Luego, Perimetro(self) que devuelve el valor del atributo perimetro.
- Se implement√≥ la clase Triangulo y Cuadrado que hereda de la clase Figura.
- El m√©todo calcularArea calcula el √°rea del tri√°ngulo y del cuadrado y almacena el resultado en el atributo area. De la misma forma con el m√©todo calcularPerimetro que calcula el per√≠metro del cuadrado y almacena el resultado en el atributo perimtero.
- Finalmente se crean las instancias para que el programa imrpima los resultados.

4. Polimorfismo (Mascotas)
- En la clase Perro se crea el m√©todo hacer_sonido(self) la cual imprime "Guau", que es el sonido caracter√≠stico de un perro. De la misma forma con las clases Gato y Cocodrilo se crean m√©todos para los sonidos correspondientes.
- La funci√≥n hacer_sonido_del_animal(animal) acepta un objeto animal y llama al m√©todo hacer_sonido de ese objeto. Dado que todas las clases Perro, Gato, Cocodrilo tienen el m√©todo hacer_sonido, esta funci√≥n puede trabajar con cualquier objeto que tenga dicho m√©todo.
- Sea crea las instancias para perro, gato y cocodrilo. Despu√©s se llama a la funci√≥n hacer_sonido_del_animal para luego imprimir los sonidos que corresponde a cada animal.